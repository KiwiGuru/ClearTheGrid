// <auto-generated />
using System;
using ClearTheGrid.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClearTheGrid.DAL.Migrations
{
    [DbContext(typeof(ClearTheGridDBContext))]
    [Migration("20230428103332_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClearTheGrid.Model.LevelSolution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LevelSolutions");
                });

            modelBuilder.Entity("ClearTheGrid.Model.ResultMove", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LevelSolutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Move")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LevelSolutionId");

                    b.ToTable("ResultMoves");
                });

            modelBuilder.Entity("ClearTheGrid.Model.Settings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CrossoverFactor")
                        .HasColumnType("float");

                    b.Property<int>("GenerationCount")
                        .HasColumnType("int");

                    b.Property<double>("MutationFactor")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PopulationSize")
                        .HasColumnType("int");

                    b.Property<int>("SelectionCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a829abb3-b012-4597-a2a2-15374a36cd8c"),
                            CrossoverFactor = 0.050000000000000003,
                            GenerationCount = 10000,
                            MutationFactor = 0.050000000000000003,
                            Name = "BaseSettings",
                            PopulationSize = 250,
                            SelectionCount = 15
                        });
                });

            modelBuilder.Entity("ClearTheGrid.Model.ResultMove", b =>
                {
                    b.HasOne("ClearTheGrid.Model.LevelSolution", "LevelSolution")
                        .WithMany("Moves")
                        .HasForeignKey("LevelSolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LevelSolution");
                });

            modelBuilder.Entity("ClearTheGrid.Model.LevelSolution", b =>
                {
                    b.Navigation("Moves");
                });
#pragma warning restore 612, 618
        }
    }
}
